openapi: "3.0.0"
info:
  description: "This is the User API for UC4."
  version: "0.7.1"
  title: "UC4"
servers:
  - url: https://uc4.cs.upb.de/api/user-management
tags:
- name: "Version Management"
  description: "Everything about the Version"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
- name: "User Management"
  description: "Everything about the user"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
- name: "Student Management"
  description: "Everything about the student"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
- name: "Lecturer Management"
  description: "Everything about the lecturer"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
- name: "Admin Management"
  description: "Everything about the admin"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
paths:
  /version:
    get:
      tags:
      - "Version Management"
      summary: "Get version"
      description: "Returns the version of the current service"
      operationId: "getVersion"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonVersionNumber'

  /users:
    get:
      tags:
      - "User Management"
      summary: "Get all users"
      security:
        - uc4_auth: [] 
      description: "Without parameter \"usernames\", returns all users, and may only be used by administrators. With \"usernames\" set, returns all users with the given usernames, which can be invoked by all roles."
      operationId: "getUsers"
      parameters:
      - name: "usernames"
        in: "query"
        description: "A comma seperated list of usernames to filter by"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/GetAllUsersResponse'
        "400":
          description: |
            Bad Request    
            types: malformed login token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "403":
          description: |
            Forbidden  
            types: not enough privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity   
            types: login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    post:
      tags:
      - "User Management"
      summary: "Add a new user to the database"
      description: "Adds a new user to the database after verification."
      operationId: "addUser"
      security:
        - uc4_auth: [] 
      requestBody:
        description: "User object that needs to be added to the database"
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PostMessageStudent'
                - $ref: '#/components/schemas/PostMessageLecturer'
                - $ref: '#/components/schemas/PostMessageAdmin'
            examples:
              PostStudent:
                $ref: '#/components/examples/ExamplePostMessageStudent'
              PostLecturer:
                $ref: '#/components/examples/ExamplePostMessageLecturer'
              PostAdmin:
                $ref: '#/components/examples/ExamplePostMessageAdmin'
                  
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Student'
                  - $ref: '#/components/schemas/Lecturer'
                  - $ref: '#/components/schemas/Admin'
              examples:
                student:
                  $ref: '#/components/examples/ExampleStudent'
                lecturer:
                  $ref: '#/components/examples/ExampleLecturer'
                admin:
                  $ref: '#/components/examples/ExampleAdmin'
          headers:
            Location:
              schema:
                type: string
                description: "URI of the newly created Student"
        "400":
          description: | 
            Bad Request  
            types: malformed login token
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GenericError'
                  - $ref: '#/components/schemas/DetailedError'
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "403":
          description: |
            Forbidden  
            types: not enough privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "409":
          description: |
            Conflict  
            types: key duplicate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity  
            types: validation error, login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
    
  /users/{username}:
    get:
      tags:
      - "User Management"
      security:
        - uc4_auth: []
      summary: "Get user object for a specified username"
      description: "Get user object of specific user"
      operationId: "getUserByUsername"
      parameters:
      - in: "path"
        name: "username"
        required: true
        schema: 
          type: "string"
      responses:
          "200":
            description: "OK"
            content:
              application/json:
                schema:
                  oneOf:
                  - $ref: '#/components/schemas/Student'
                  - $ref: '#/components/schemas/Lecturer'
                  - $ref: '#/components/schemas/Admin'
                examples:
                  student:
                    $ref: '#/components/examples/ExampleStudent'
                  lecturer:
                    $ref: '#/components/examples/ExampleLecturer'
                  admin:
                    $ref: '#/components/examples/ExampleAdmin'
          "400":
            description: |
              Bad Request    
              types: malformed login token
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
          "401":
            description: |
              Unauthorized  
              types: jwt authorization error, login token expired
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
          "404":
            description: |
              Not Found  
              types: key not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
          "422":
            description: |
              Unprocessable Entity   
              types: login token signature invalid
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    put:
      tags:
      - "User Management"
      summary: "Update an existing user"
      description: |
        Updates a user if invoked by an administrator or by the user itself. Can only change specific attributes if invoked by a regular user&#58;
          Address, Email and profile picture
      operationId: "updateUser"
      security:
        - uc4_auth: [] 
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "User object that needs to be updated"
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/Student'
              - $ref: '#/components/schemas/Lecturer'
              - $ref: '#/components/schemas/Admin'
            examples:
              student:
                $ref: '#/components/examples/ExampleStudent'
              lecturer:
                $ref: '#/components/examples/ExampleLecturer'
              admin:
                $ref: '#/components/examples/ExampleAdmin'
      responses:
        "200":
          description: "OK"
        "400":
          description: | 
            Bad Request  
            types: malformed login token
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GenericError'
                  - $ref: '#/components/schemas/DetailedError'
        
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "403":
          description: |
            Forbidden  
            types: not enough privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: |
            Not Found  
            types: key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity  
            types: validation error, uneditable fields, login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
    delete:
      tags:
      - "User Management"
      summary: "Deletes a user"
      description: "Deletes a user (when invoked by an administrator)"
      security:
        - uc4_auth: [] 
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
        "400":
          description: |
            Bad Request    
            types: malformed login token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "403":
          description: |
            Forbidden  
            types: not enough privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: |
            Not Found  
            types: key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity   
            types: login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /users/{username}/role:
    get:
      tags:
      - "User Management"
      summary: "Returns the role of a user"
      description: "Returns the role of the user with the specified username"
      security:
        - uc4_auth: [] 
      operationId: "getRole"
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        "400":
          description: |
            Bad Request    
            types: malformed login token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "404":
          description: |
            Not Found  
            types: key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity   
            types: login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  
  /students:
    get:
      tags:
      - "Student Management"
      summary: "Get all students"
      security:
        - uc4_auth: [] 
      description: "Without parameter \"usernames\", returns all students, and may only be used by administrators. With \"usernames\" set, returns all students with the given usernames, which can be invoked by all roles."
      operationId: "getStudents"
      parameters:
      - name: "usernames"
        in: "query"
        description: "A comma seperated list of usernames to filter by"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Student'
        "400":
          description: |
            Bad Request    
            types: malformed login token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "403":
          description: |
            Forbidden  
            types: not enough privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity   
            types: login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

  /lecturers:
    get:
      tags:
      - "Lecturer Management"
      summary: "Get all lecturers"
      security:
        - uc4_auth: [] 
      description: "Without parameter \"usernames\", returns all lecturers, and may only be used by administrators. With \"usernames\" set, returns all lecturers with the given usernames, which can be invoked by all roles."
      operationId: "getLecturers"
      parameters:
      - name: "usernames"
        in: "query"
        description: "A comma seperated list of usernames to filter by"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Lecturer'
        "400":
          description: |
            Bad Request    
            types: malformed login token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "403":
          description: |
            Forbidden  
            types: not enough privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity   
            types: login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  
  /admins:
    get:
      tags:
      - "Admin Management"
      summary: "Get all admins"
      security:
        - uc4_auth: [] 
      description: "Without parameter \"usernames\", returns all admins, and may only be used by administrators. With \"usernames\" set, returns all admins with the given usernames, which can be invoked by all roles."
      operationId: "getAdmins"
      parameters:
      - name: "usernames"
        in: "query"
        description: "A comma seperated list of usernames to filter by"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Admin'
        "400":
          description: |
            Bad Request    
            types: malformed login token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "401":
          description: |
            Unauthorized  
            types: jwt authorization error, login token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "403":
          description: |
            Forbidden  
            types: not enough privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        "422":
          description: |
            Unprocessable Entity   
            types: login token signature invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'

components:
  securitySchemes:
    uc4_auth:
      type: http
      scheme: basic
      
  schemas:
    GetAllUsersResponse:
      type: "object"
      properties:
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        lecturer:
          type: array
          items:
            $ref: '#/components/schemas/Lecturer'
        admins:
          type: array
          items:
            $ref: '#/components/schemas/Admin'
    PostMessageStudent:
      allOf: 
        - $ref: '#/components/schemas/PostMessageUser'
        - type: object
          properties:
            student:
              $ref: '#/components/schemas/Student'
    PostMessageLecturer:
      allOf: 
        - $ref: '#/components/schemas/PostMessageUser'
        - type: object
          properties:
            lecturer:
              $ref: '#/components/schemas/Lecturer'
    PostMessageAdmin:
      allOf: 
        - $ref: '#/components/schemas/PostMessageUser'
        - type: object
          properties:
            admin:
              $ref: '#/components/schemas/Admin'
    PostMessageUser:
      type: "object"
      properties:
        authUser:
          allOf:
            - $ref: "#/components/schemas/AuthUser"
    User:
      type: "object"
      properties:
        username:
          type: string
        role:
          type: string
          enum: ["Admin", "Student", "Lecturer"]
        address:
          allOf: 
            - $ref: '#/components/schemas/Address'
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date
        picture:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
          format: phonenumber
          example: "+49123456789"
    Admin:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object    
    Student:
      allOf: 
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            latestImmatriculation:
              type: string
            matriculationId:
              type: string
    Lecturer:
      allOf: 
        - $ref: '#/components/schemas/User'
        - type: object
          properties:    
            freeText:
              type: string
            researchArea:
              type: string
    Address:
      type: object
      properties:
        street:
          type: string
        houseNumber:
          type: string
        zipCode:
          type: string
        city:
          type: string
        country:
          type: string
    Role:
      type: "object"
      properties:
        role:
          type: "string"
          enum: ["Admin", "Student", "Lecturer"]
    AuthUser:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        role:
          type: "string"
          enum: ["Admin", "Student", "Lecturer"]
    JsonVersionNumber:
      type: object
      properties:
        versionNumber:
          type: string
    GenericError:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/upb-uc4/api/develop/errors.yaml#/components/schemas/GenericError'
        - type: object
    DetailedError:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/upb-uc4/api/develop/errors.yaml#/components/schemas/DetailedError'
        - type: object
  examples:
    ExamplePostMessageStudent:
      summary: "Example for PostMessageStudent"
      value:
        authUser:
          username: "test-student"
          password: "password123"
          role: "Student"
        student:
          username: "test-student"
          role: "Student"
          address:
            street: "Sandy Street"
            houseNumber: "5c"
            zipCode: "42069"
            city: "Mos Eisley"
            country: "Germany"
          firstName: "Luke"
          lastName: "Skywalker"
          picture: "string"
          email: "luke@skywalker.com"
          birthDate: "1950-12-24"
          phoneNumber: "+49123456789"
          latestImmatriculation: ""
          matriculationId: "1234567"
    ExampleStudent:
      summary: "Example for Student"
      value:
        username: "test-student"
        role: "Student"
        address:
          street: "Sandy Street"
          houseNumber: "5c"
          zipCode: "42069"
          city: "Mos Eisley"
          country: "Germany"
        firstName: "Luke"
        lastName: "Skywalker"
        picture: "string"
        email: "luke@skywalker.com"
        birthDate: "1950-12-24"
        phoneNumber: "+49123456789"
        latestImmatriculation: ""
        matriculationId: "1234567"
    ExamplePostMessageLecturer:
      summary: "Example for PostMessageLecturer"
      value:
        authUser:
          username: "test-lec"
          password: "password123"
          role: "Lecturer"
        lecturer:
          username: "test-lec"
          role: "Lecturer"
          address:
            street: "Sandy Street"
            houseNumber: "5c"
            zipCode: "42069"
            city: "Mos Eisley"
            country: "Germany"
          firstName: "Luke"
          lastName: "Skywalker"
          picture: "string"
          email: "luke@skywalker.com"
          birthDate: "1950-12-24"
          phoneNumber: "+49123456789"
          freeText: "Some cool publications about jedi stuff."
          researchArea: "The light side only, I swear!"
    ExampleLecturer:
      summary: "Example for Lecturer"
      value:
        username: "test-lec"
        role: "Lecturer"
        address:
          street: "Sandy Street"
          houseNumber: "5c"
          zipCode: "42069"
          city: "Mos Eisley"
          country: "Germany"
        firstName: "Luke"
        lastName: "Skywalker"
        picture: "string"
        email: "luke@skywalker.com"
        birthDate: "1950-12-24"
        phoneNumber: "+49123456789"
        freeText: "Some cool publications about jedi stuff."
        researchArea: "The light side only, I swear!"
    ExamplePostMessageAdmin:
      summary: "Example for PostMessageAdmin"
      value:
        authUser:
          username: "test-admin"
          password: "password123"
          role: "Admin"
        admin:
          username: "test-admin"
          role: "Admin"
          address:
            street: "Sandy Street"
            houseNumber: "5c"
            zipCode: "42069"
            city: "Mos Eisley"
            country: "Germany"
          firstName: "Luke"
          lastName: "Skywalker"
          picture: "string"
          email: "luke@skywalker.com"
          birthDate: "1950-12-24"
          phoneNumber: "+49123456789"
    ExampleAdmin:
      summary: "Example for Admin"
      value:
        username: "test-admin"
        role: "Admin"
        address:
          street: "Sandy Street"
          houseNumber: "5c"
          zipCode: "42069"
          city: "Mos Eisley"
          country: "Germany"
        firstName: "Luke"
        lastName: "Skywalker"
        picture: "string"
        email: "luke@skywalker.com"
        birthDate: "1950-12-24"
        phoneNumber: "+49123456789"
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
