openapi: "3.0.0"
info:
  description: "This is the User API for UC4."
  version: "0.2.2"
  title: "UC4"
servers:
  - url: http://localhost:9000/user-management
tags:
- name: "User Management"
  description: "Everything about the user"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
- name: "Student Management"
  description: "Everything about the student"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
- name: "Lecturer Management"
  description: "Everything about the lecturer"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
- name: "Admin Management"
  description: "Everything about the admin"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
paths:
  /users:
    get:
      tags:
      - "User Management"
      summary: "Get all users"
      security:
        - uc4_auth: [] 
      description: "Returns all users, may only be used by administrators"
      operationId: "getUsers"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/GetAllUsersResponse'
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /users/{username}:
    delete:
      tags:
      - "User Management"
      summary: "Deletes a user"
      description: "Deletes a user (when invoked by an administrator)"
      security:
        - uc4_auth: [] 
      operationId: "deleteUser"
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "No user with this username found"
  /users/students:
    post:
      tags:
      - "Student Management"
      summary: "Add a new student to the database"
      description: "Adds a new student to the database after verification."
      operationId: "addStudent"
      security:
        - uc4_auth: [] 
      requestBody:
        required: true
        description: "Student object that needs to be added to the database"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageStudent'
      responses:
        "201":
          description: "Student Created"
        "400":
          description: | 
            Bad Request 
            
            detail contains deserialization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 01 | username must only contain [..] |
            | 10 |  password must not be empty   |
            | 20 | role must be one of [..] |
            | 30 | address fields must not be empty  |
            | 40 | email must be valid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | <b>1xx</b> | <b>Student User Error codes</b> |
            | 100 | student id invalid |
            | 110 | semester count must be a positive integer |
            | 120 | fields of study must be one of [...] |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "409":
          description: "Username already exists"
    get:
      tags:
      - "Student Management"
      summary: "Get all students"
      security:
        - uc4_auth: [] 
      description: "Returns all students, may only be used by administrators"
      operationId: "getStudents"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Student'
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /users/students/{username}:
    get:
      tags:
      - "Student Management"
      security:
        - uc4_auth: []
      summary: "Get student object of specific student"
      description: "Get student object of specific student"
      operationId: "getStudentByStudentName"
      parameters:
      - in: "path"
        name: "username"
        required: true
        schema: 
          type: "string"
      responses:
          "200":
            description: "successful operation"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Student'
          "401":
            description: "Unauthorized"
          "404":
            description: "No student with this username found"
    delete:
      tags:
      - "Student Management"
      summary: "Deletes a student"
      description: "Deletes a student (when invoked by an administrator)"
      security:
        - uc4_auth: [] 
      operationId: "deleteStudent"
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "No student with this username found"
    put:
      tags:
      - "Student Management"
      summary: "Update an existing student"
      description: |
        Updates a user if invoked by an administrator or by the user itself. Can only change specific attributes if invoked by a regular user&#58;
          Address, Email and profile picture
      operationId: "updateStudent"
      security:
        - uc4_auth: [] 
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Student object that needs to be updated"
        required: true
        content:
          application/json:
            schema:       
              $ref: "#/components/schemas/Student"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 10 | username must not be changed [..] |
            | 20 | role may not be changed [..] |
            | 30 | address fields must not be empty  |
            | 40 | email must be valid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | -1xx- | Student User Error codes |
            | 100 | student id invalid |
            | 110 | semester count must be a positive integer |
            | 120 | fields of study must be one of [...] |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Student not found"
  /users/lecturers:
    post:
      tags:
      - "Lecturer Management"
      summary: "Add a new lecturer to the database"
      description: "Adds a new lecturer to the database after verification."
      operationId: "addLecturer"
      security:
        - uc4_auth: [] 
      requestBody:
        required: true
        description: "Lecturer object that needs to be added to the database"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageLecturer'
      responses:
        "201":
          description: "Lecturer Created"
        "400":
          description: | 
            Bad Request 
            
            detail contains deserialization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 01 | username must only contain [..] |
            | 10 |  password must not be empty   |
            | 20 | role must be one of [..] |
            | 30 | address fields must not be empty  |
            | 40 | email must be valid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | <b>2xx</b> | <b>Lecturer User Error codes</b> |
            | 200 | free text must only contain the following characters |
            | 210 | research area must only contain the following characters |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "409":
          description: "Username already exists"
    get:
      tags:
      - "Lecturer Management"
      summary: "Get all lecturers"
      security:
        - uc4_auth: [] 
      description: "Returns all lecturers, may only be used by administrators"
      operationId: "getLecturers"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Lecturer'
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /users/lecturers/{username}:
    get:
      tags:
      - "Lecturer Management"
      security:
        - uc4_auth: []
      summary: "Get lecturer object of specific username"
      description: "Get lecturer object of specific username"
      operationId: "getLecturerByUsername"
      parameters:
      - in: "path"
        name: "username"
        required: true
        schema: 
          type: "string"
      responses:
          "200":
            description: "successful operation"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Lecturer'
          "401":
            description: "Unauthorized"
          "404":
            description: "No lecturer with this username found"
    delete:
      tags:
      - "Lecturer Management"
      summary: "Deletes a lecturer"
      description: "Deletes a lecturer (when invoked by an administrator)"
      security:
        - uc4_auth: [] 
      operationId: "deleteLecturer"
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "No lecturer with this username found"
    put:
      tags:
      - "Lecturer Management"
      summary: "Update an existing lecturer"
      description: |
        Updates a user if invoked by an administrator or by the user itself. Can only change specific attributes if invoked by a regular user&#58;
          Address, Email and profile picture, free text and research area
      operationId: "updateLecturer"
      security:
        - uc4_auth: [] 
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Lecturer object that needs to be updated"
        required: true
        content:
          application/json:
            schema:       
              $ref: "#/components/schemas/Lecturer"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 10 | username must not be changed [..] |
            | 20 | role may not be changed [..] |
            | 30 | address fields must not be empty  |
            | 40 | email must be valid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | -2xx- | Lecturer User Error codes |
            | 200 | free text must only contain the following characters |
            | 210 | research area must only contain the following characters |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "No lecturer with this username found"
  /users/admins:
    post:
      tags:
      - "Admin Management"
      summary: "Add a new admin to the database"
      description: "Adds a new admin to the database after verification."
      operationId: "addAdmin"
      security:
        - uc4_auth: [] 
      requestBody:
        required: true
        description: "Admin object that needs to be added to the database"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageAdmin'
      responses:
        "201":
          description: "Admin Created"
        "400":
          description: | 
            Bad Request 
            
            detail contains deserialization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 01 | username must only contain [..] |
            | 10 |  password must not be empty   |
            | 20 | role must be one of [..] |
            | 30 | address fields must not be empty  |
            | 40 | email must be valid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | -3xx- | Admin User Error codes |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "409":
          description: "Username already exists"
    get:
      tags:
      - "Admin Management"
      summary: "Get all admins"
      security:
        - uc4_auth: [] 
      description: "Returns all admins, may only be used by administrators"
      operationId: "getAdmins"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/PostMessageAdmin'
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /users/admins/{username}:
    get:
      tags:
      - "Admin Management"
      security:
        - uc4_auth: []
      summary: "Get admin object of specific username"
      description: "Get admin object of specific username"
      operationId: "getAdminByUsername"
      parameters:
      - in: "path"
        name: "username"
        required: true
        schema: 
          type: "string"
      responses:
          "200":
            description: "successful operation"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Admin'
          "401":
            description: "Unauthorized"
          "404":
            description: "No admin with this username found"
    delete:
      tags:
      - "Admin Management"
      summary: "Deletes a admin"
      description: "Deletes a admin (when invoked by an administrator)"
      security:
        - uc4_auth: [] 
      operationId: "deleteAdmin"
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "No admin with this username found"
    put:
      tags:
      - "Admin Management"
      summary: "Update an existing admin"
      operationId: "updateAdmin"
      security:
        - uc4_auth: [] 
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Admin object that needs to be updated"
        required: true
        content:
          application/json:
            schema:       
              $ref: "#/components/schemas/Admin"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 10 | username must not be changed [..] |
            | 20 | role may not be changed [..] |
            | 30 | address fields must not be empty  |
            | 40 | email must be valid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | -3xx- | Admin User Error codes |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "No admin with this username found"
components:
  securitySchemes:
    uc4_auth:
      type: http
      scheme: basic
  schemas:
    GetAllUsersResponse:
      type: "object"
      properties:
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        lecturer:
          type: array
          items:
            $ref: '#/components/schemas/Lecturer'
        admins:
          type: array
          items:
            $ref: '#/components/schemas/Admin'
    PostMessageStudent:
      type: "object"
      properties:
        authUser:
          allOf:
            - $ref: "https://raw.githubusercontent.com/upb-uc4/api/develop/authentication.yaml#/definitions/AuthUser"
        student:
          $ref: '#/components/schemas/Student'
    PostMessageLecturer:
      type: "object"
      properties:
        authUser:
          allOf:
            - $ref: "https://raw.githubusercontent.com/upb-uc4/api/develop/authentication.yaml#/definitions/AuthUser"
        lecturer:
          $ref: '#/components/schemas/Lecturer'
    PostMessageAdmin:
      type: "object"
      properties:
        authUser:
          allOf:
            - $ref: "https://raw.githubusercontent.com/upb-uc4/api/develop/authentication.yaml#/definitions/AuthUser"
        admin:
          $ref: '#/components/schemas/Admin'
    User:
      type: "object"
      properties:
        username:
          type: string
        role:
          type: string
          enum: ["Admin", "Student", "Lecturer"]
        address:
          allOf: 
            - $ref: '#/components/schemas/Address'
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date
        picture:
          type: string
        email:
          type: string
          format: email
    Admin:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object    
    Student:
      allOf: 
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            immatriculationStatus:
              type: string
            matriculationId:
              type: string
            semesterCount:
              type: number
            fieldsOfStudy:
              type: array
              items:
                type: string
                enum: ["Informatik", "Philosophie", "Medienwissenschaften", "Wirtschaftswissenschaften", "Mathematik", "Physik", "Chemie", "Lehramt", "Sportwissenschaften", "Japanologie", "Spanische Kultur", "Pädagogik", "Wirtschaftsinformatik", "Linguistik"]
    Lecturer:
      allOf: 
        - $ref: '#/components/schemas/User'
        - type: object
          properties:    
            freeText:
              type: string
            researchArea:
              type: string
    Error:
      type: object
      properties:
        name:
          type: string
        detail:
          type: string
      required:
        - code
        - message
    Address:
      type: object
      properties:
        street:
          type: string
        houseNumber:
          type: string
        zipCode:
          type: string
        city:
          type: string
        country:
          type: string
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"