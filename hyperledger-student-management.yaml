openapi: "3.0.0"
info:
  description: "This is the Student API for UC4's hyperledger component."
  version: "0.3.3"
  title: "UC4"
servers:
  - url: http://localhost:9000/hyperledger-student-management
tags:
- name: "Student Management"
  description: "Everything about the student"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/upb-uc4"
paths:
  /users/students:
    post:
      tags:
      - "Student Management"
      summary: "Add a new student to the database"
      description: "Adds a new student to the database after verification."
      operationId: "addStudent"
      security:
        - uc4_auth: [] 
      requestBody:
        required: true
        description: "Student object that needs to be added to the database"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        "201":
          description: "Student Created"
        "400":
          description: | 
            Bad Request 
            
            detail contains deserialization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 01 | username must only contain [..] |
            | 10 | password must not be empty   |
            | 20 | role must be one of [..] |
            | 30 | address fields must not be empty  |
            | 40 | email format invalid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | <b>1xx</b> | <b>Student User Error codes</b> |
            | 100 | student id invalid |
            | 110 | semester count must be a positive integer |
            | 120 | fields of study must be one of [...] |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "409":
          description: "Username already exists"
    get:
      tags:
      - "Student Management"
      summary: "Get all students"
      security:
        - uc4_auth: [] 
      description: "Returns all students, may only be used by administrators"
      operationId: "getStudents"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Student'
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /users/students/{username}:
    get:
      tags:
      - "Student Management"
      security:
        - uc4_auth: []
      summary: "Get student object of specific student"
      description: "Get student object of specific student"
      operationId: "getStudentByStudentName"
      parameters:
      - in: "path"
        name: "username"
        required: true
        schema: 
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "401":
          description: "Unauthorized"
        "404":
          description: "No student with this username found"
    put:
      tags:
      - "Student Management"
      summary: "Update an existing student"
      description: |
        Updates a user if invoked by an administrator or by the user itself. Can only change specific attributes if invoked by a regular user&#58;
          Address, Email and profile picture
      operationId: "updateStudent"
      security:
        - uc4_auth: [] 
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Student object that needs to be updated"
        required: true
        content:
          application/json:
            schema:       
              $ref: "#/components/schemas/Student"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: |
            Bad Request
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 10 | username must not be changed [..] |
            | 20 | role may not be changed [..] |
        "422":
          description: |
            Unprocessable Entity
            Custom error codes
            | Error Code (name)| Details |
            |-----|-----|
            | 01 | username must only contain [..] |
            | 10 | password must not be empty   |
            | 20 | role must be one of [..] |
            | 30 | address fields must not be empty  |
            | 40 | email format invalid |
            | 50 | first name must not contain XYZ | 
            | 60 | last name must not contain XYZ |
            | 70 | picture invalid |
            | <b>1xx</b> | <b>Student User Error codes</b> |
            | 100 | student id invalid |
            | 110 | semester count must be a positive integer |
            | 120 | fields of study must be one of [...] |
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Student not found"
components:
  securitySchemes:
    uc4_auth:
      type: http
      scheme: basic
  schemas:
    Student:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date
        immatriculationStatus:
          type: array
          items:
            allOf: 
            - $ref: '#/components/schemas/SubjectImmatriculationInterval'
        matriculationId:
          type: string
    Error:
      type: object
      properties:
        name:
          type: string
        detail:
          type: string
      required:
        - code
        - message
    ImmatriculationInterval:
      type: "object"
      properties:
        # are there different immatriculation statuses
        firstSemester:
          type: string
        lastSemester:
          type: string
    SubjectImmatriculationInterval:
      type: "object"
      properties:
        fieldOfStudy:
          type: string
          enum: ["Computer Science", "Philosophy","Media Sciences","Economics","Mathematics","Physics","Chemistry","Education","Sports Science","Japanology","Spanish Culture","Pedagogy","Business Informatics","Linguistics","Vacation"]
        intervals:
          type: array
          items:
            allOf: 
            - $ref: '#/components/schemas/ImmatriculationInterval'
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
